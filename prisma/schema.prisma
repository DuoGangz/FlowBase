generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  ADMIN_MANAGER
  MANAGER
  USER
}

enum AuditAction {
  ROLE_CHANGE
  OWNERSHIP_TRANSFER
  USER_CREATE
}

model Account {
  id       Int       @id @default(autoincrement())
  name     String
  users    User[]
  projects Project[]
  homePages HomePage[]
  assignments Assignment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String
  username  String?   @unique
  passwordHash String?
  accountId Int
  account   Account   @relation(fields: [accountId], references: [id])
  messages  Message[]
  todos     Todo[]
  roadmapEntries RoadmapEntry[]
  timeEntries TimeEntry[]
  role      Role      @default(USER)
  managerId Int?
  manager   User?     @relation("UserManager", fields: [managerId], references: [id])
  subordinates User[] @relation("UserManager")
  auditLogsAuthored AuditLog[] @relation("AuditActor")
  auditLogsTargeted AuditLog[] @relation("AuditTarget")
  homePagePermissions HomePagePermission[]
  assignmentsAuthored Assignment[] @relation("AssignmentAuthor")
  assignmentsAssigned Assignment[] @relation("AssignmentAssignee")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  accountId Int
  account   Account   @relation(fields: [accountId], references: [id])
  messages  Message[]
  todos     Todo[]
  files     File[]
  roadmapEntries RoadmapEntry[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Todo {
  id        Int       @id @default(autoincrement())
  title     String
  projectId Int
  project   Project   @relation(fields: [projectId], references: [id])
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  items     TodoItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model TodoItem {
  id        Int      @id @default(autoincrement())
  content   String
  done      Boolean  @default(false)
  position  Int      @default(0)
  todoId    Int
  todo      Todo     @relation(fields: [todoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subItems  TodoSubItem[]
}

model TodoSubItem {
  id          Int      @id @default(autoincrement())
  content     String
  done        Boolean  @default(false)
  position    Int      @default(0)
  todoItemId  Int
  todoItem    TodoItem @relation(fields: [todoItemId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model File {
  id        Int      @id @default(autoincrement())
  path      String
  metadata  Json
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
  ownerUserId Int?
  ownerUser   User?    @relation(fields: [ownerUserId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TimeEntry {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  date      DateTime  // normalized to start of day (local)
  clockIn   DateTime?
  lunchOut  DateTime?
  lunchIn   DateTime?
  clockOut  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, date])
}

model AuditLog {
  id            Int          @id @default(autoincrement())
  action        AuditAction
  actorUserId   Int
  actor         User         @relation("AuditActor", fields: [actorUserId], references: [id])
  targetUserId  Int?
  target        User?        @relation("AuditTarget", fields: [targetUserId], references: [id])
  details       Json
  createdAt     DateTime     @default(now())
}

model RoadmapEntry {
  id          Int       @id @default(autoincrement())
  description String
  date        DateTime
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [id])
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

/// A customizable home page with independent module layout/state per account
model HomePage {
  id         Int      @id @default(autoincrement())
  accountId  Int
  account    Account  @relation(fields: [accountId], references: [id])
  name       String
  /// JSON blob containing layout/modules configuration
  layout     Json
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  permissions HomePagePermission[]

  @@unique([accountId, name])
}

/// Explicit grants for which users can access a given home page
model HomePagePermission {
  id         Int      @id @default(autoincrement())
  homePageId Int
  homePage   HomePage @relation(fields: [homePageId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  canEdit    Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@unique([homePageId, userId])
}

/// Assignments are lightweight tasks assigned by OWNER/MANAGER to users.
model Assignment {
  id           Int      @id @default(autoincrement())
  title        String
  details      String?
  assignedToId Int
  assignedTo   User     @relation("AssignmentAssignee", fields: [assignedToId], references: [id])
  assignedById Int
  assignedBy   User     @relation("AssignmentAuthor", fields: [assignedById], references: [id])
  dueDate      DateTime?
  completed    Boolean  @default(false)
  completedAt  DateTime?
  accountId    Int
  account      Account  @relation(fields: [accountId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([assignedToId])
  @@index([assignedById])
}

